{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './types';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, usuario) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    usuario: usuario\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const authlogout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const handle_login = (e, data) => {\n  e.preventDefault();\n  fetch('http://localhost:8000/token-auth/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => res.json()).then(json => {\n    localStorage.setItem('token', json.token);\n    this.setState({\n      logged_in: true,\n      displayed_form: '',\n      username: json.user.username\n    });\n  });\n};\nexport const authLogin = (username, password) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://http://127.0.0.1:8000/token-auth', {\n      username: username,\n      password: password\n    }, config).then(res => {\n      console.log(res.data.token);\n      const token = res.data.token;\n      localStorage.setItem('token', token);\n      localStorage.setItem('authenticate', true);\n      dispatch(authSuccess(token));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/franc/Documents/practicas/CodeSoft2/Front/src/store/action/auth.js"],"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","token","usuario","AUTH_SUCCESS","authFail","error","AUTH_FAIL","authlogout","AUTH_LOGOUT","handle_login","e","data","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","localStorage","setItem","setState","logged_in","displayed_form","username","user","authLogin","password","config","dispatch","post","console","log","catch","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,SAA7B;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAEF,WAAW,CAACG;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC3C,SAAO;AACHJ,IAAAA,IAAI,EAAEF,WAAW,CAACO,YADf;AAEHF,IAAAA,KAAK,EAAEA,KAFJ;AAGHC,IAAAA,OAAO,EAAEA;AAHN,GAAP;AAKH,CANM;AAQP,OAAO,MAAME,QAAQ,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHP,IAAAA,IAAI,EAAEF,WAAW,CAACU,SADf;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,UAAU,GAAG,MAAM;AAC5B,SAAO;AACHT,IAAAA,IAAI,EAAEF,WAAW,CAACY;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,YAAY,GAAG,CAACC,CAAD,EAAIC,IAAJ,KAAa;AACrCD,EAAAA,CAAC,CAACE,cAAF;AACAC,EAAAA,KAAK,CAAC,mCAAD,EAAsC;AACzCC,IAAAA,MAAM,EAAE,MADiC;AAEzCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFgC;AAKzCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AALmC,GAAtC,CAAL,CAOGQ,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPf,EAQGF,IARH,CAQQE,IAAI,IAAI;AACZC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACpB,KAAnC;AACA,SAAKuB,QAAL,CAAc;AACZC,MAAAA,SAAS,EAAE,IADC;AAEZC,MAAAA,cAAc,EAAE,EAFJ;AAGZC,MAAAA,QAAQ,EAAEN,IAAI,CAACO,IAAL,CAAUD;AAHR,KAAd;AAKD,GAfH;AAgBD,CAlBI;AAsBP,OAAO,MAAME,SAAS,GAAG,CAACF,QAAD,EAAWG,QAAX,KAAwB;AAC7C,QAAMC,MAAM,GAAG;AACXhB,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf;AAKA,SAAOiB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACnC,SAAS,EAAV,CAAR;AAEAF,IAAAA,KAAK,CAACsC,IAAN,CAAW,yCAAX,EAAsD;AAClDN,MAAAA,QAAQ,EAAEA,QADwC;AAElDG,MAAAA,QAAQ,EAAEA;AAFwC,KAAtD,EAGGC,MAHH,EAIKZ,IAJL,CAIUC,GAAG,IAAI;AACTc,MAAAA,OAAO,CAACC,GAAR,CAAYf,GAAG,CAACT,IAAJ,CAASV,KAArB;AACA,YAAMA,KAAK,GAAGmB,GAAG,CAACT,IAAJ,CAASV,KAAvB;AACAqB,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BtB,KAA9B;AACAqB,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqC,IAArC;AACAS,MAAAA,QAAQ,CAAChC,WAAW,CAACC,KAAD,CAAZ,CAAR;AACH,KAVL,EAWKmC,KAXL,CAWWC,GAAG,IAAI;AACVL,MAAAA,QAAQ,CAAC5B,QAAQ,CAACiC,GAAD,CAAT,CAAR;AACH,KAbL;AAcH,GAjBD;AAkBH,CAxBM","sourcesContent":["import axios from 'axios';\r\nimport * as actionTypes from './types';\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START\r\n    }\r\n}\r\n\r\nexport const authSuccess = (token, usuario) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        token: token, \r\n        usuario: usuario\r\n    }\r\n}\r\n\r\nexport const authFail = error => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const authlogout = () => {\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT\r\n    }\r\n}\r\n\r\nexport const handle_login = (e, data) => {\r\n    e.preventDefault();\r\n    fetch('http://localhost:8000/token-auth/', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        localStorage.setItem('token', json.token);\r\n        this.setState({\r\n          logged_in: true,\r\n          displayed_form: '',\r\n          username: json.user.username\r\n        });\r\n      });\r\n  };\r\n\r\n\r\n  \r\nexport const authLogin = (username, password) => {\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    }\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n\r\n        axios.post('http://http://127.0.0.1:8000/token-auth', {\r\n            username: username,\r\n            password: password\r\n        }, config)\r\n            .then(res => {\r\n                console.log(res.data.token)\r\n                const token = res.data.token;\r\n                localStorage.setItem('token', token);\r\n                localStorage.setItem('authenticate', true);\r\n                dispatch(authSuccess(token));\r\n            })\r\n            .catch(err => {\r\n                dispatch(authFail(err));\r\n            }) \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}