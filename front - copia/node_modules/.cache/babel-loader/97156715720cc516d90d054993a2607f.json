{"ast":null,"code":"import axios from 'axios';\nimport * as actionType from '../action/types';\nexport const authStart = () => {\n  return {\n    type: actionType.AUTH_START\n  };\n};\nexport const authSuccess = token => {\n  return {\n    type: actionType.AUTH_SUCCESS,\n    token: token\n  };\n};\nexport const authFail = () => {\n  return {\n    type: actionType.AUTH_FAIL\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userName');\n  return {\n    type: actionType.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTime = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://localhost:8000/token-auth/', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.token;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess(token));\n      dispatch(checkAuthTime(3600));\n    }).catch(err => {\n      dispatch(authFail());\n      dispatch(errorMessage(err.response.data, err.response.status));\n    });\n  };\n};\nexport const authSignUpPatient = (username, email, password1, password2, first_name, last_name, idDoctor) => {\n  return dispatch => {\n    dispatch(authStart());\n    let data = JSON.stringify({\n      username: username,\n      email: email,\n      password: password1,\n      first_name: first_name,\n      last_name: last_name,\n      doctores: idDoctor\n    });\n    localStorage.removeItem('Doctores');\n    axios.post('http://localhost:8000/patient/', data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      console.log(res);\n      const token = res.data.token;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userName', res.data.username);\n      dispatch(authSuccess(token));\n      dispatch(checkAuthTime(3600));\n    }).catch(err => {\n      dispatch(authFail());\n      dispatch(errorMessage(err.response.data, err.response.status));\n    });\n  };\n};\nexport const authSignUpDoctor = (username, email, password1, password2, first_name, last_name) => {\n  return dispatch => {\n    dispatch(authStart());\n    let data = JSON.stringify({\n      username: username,\n      email: email,\n      password: password1,\n      first_name: first_name,\n      last_name: last_name\n    });\n    axios.post('http://localhost:8000/users/', data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      console.log(res);\n      const token = res.data.token;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userName', res.data.username);\n      dispatch(authSuccess(token));\n      dispatch(checkAuthTime(3600));\n    }).catch(err => {\n      dispatch(authFail());\n      dispatch(errorMessage(err.response.data, err.response.status));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTime((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};\nexport const errorMessage = (msg, status) => {\n  return {\n    type: actionType.ERROR_LEAD,\n    payload: {\n      msg,\n      status\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/franc/Documents/GitHub/CodeSoft/front - copia/src/store/action/auth.js"],"names":["axios","actionType","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTime","expirationTime","dispatch","setTimeout","authLogin","username","password","post","headers","then","res","data","expirationDate","Date","getTime","setItem","catch","err","errorMessage","response","status","authSignUpPatient","email","password1","password2","first_name","last_name","idDoctor","JSON","stringify","doctores","console","log","authSignUpDoctor","authCheckState","getItem","undefined","msg","ERROR_LEAD","payload"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport * as actionType from '../action/types';\r\nexport const authStart = () =>{\r\n    return {\r\n        type:actionType.AUTH_START\r\n    }\r\n}  \r\nexport const authSuccess = (token) =>{\r\n    return {\r\n        type : actionType.AUTH_SUCCESS,\r\n        token : token\r\n    }\r\n}  \r\nexport const authFail = ()=>{\r\n    return {\r\n        type:actionType.AUTH_FAIL,\r\n    }\r\n}\r\nexport const logout = () =>{\r\n    localStorage.removeItem('token')\r\n    localStorage.removeItem('expirationDate')\r\n    localStorage.removeItem('userName')\r\n    return {\r\n        type:actionType.AUTH_LOGOUT\r\n    }\r\n}  \r\nexport const checkAuthTime = expirationTime =>{\r\n    return dispatch=>{\r\n        setTimeout(()=>{\r\n            dispatch(logout())\r\n        },expirationTime * 1000)\r\n    }\r\n}\r\nexport const authLogin = (username, password) =>{\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        axios.post('http://localhost:8000/token-auth/',{\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n        username:username,\r\n        password:password})\r\n        .then(res=>{\r\n            const token = res.data.token;\r\n            const expirationDate = new Date(new Date().getTime()+3600 * 1000)\r\n            localStorage.setItem('token',token)\r\n            localStorage.setItem('expirationDate',expirationDate)\r\n            dispatch(authSuccess(token))\r\n            dispatch(checkAuthTime(3600))\r\n            \r\n        })\r\n        .catch(err =>{\r\n            dispatch(authFail())\r\n            dispatch(errorMessage(err.response.data, err.response.status))\r\n        })\r\n    }\r\n}\r\nexport const authSignUpPatient = (username, email, password1, password2, first_name, last_name,idDoctor) =>{\r\n    return dispatch => { \r\n        dispatch(authStart());\r\n        let data = JSON.stringify({\r\n            username: username,\r\n            email: email,\r\n            password: password1,\r\n            first_name: first_name,\r\n            last_name: last_name,\r\n            doctores: idDoctor\r\n        })\r\n        \r\n        localStorage.removeItem('Doctores')\r\n        axios.post('http://localhost:8000/patient/',data,{\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        })\r\n        .then(res=>{\r\n            console.log(res)\r\n            const token = res.data.token;\r\n            const expirationDate = new Date(new Date().getTime()+3600 * 1000)\r\n            localStorage.setItem('token',token)\r\n            localStorage.setItem('expirationDate',expirationDate)\r\n            localStorage.setItem('userName',res.data.username)\r\n            dispatch(authSuccess(token))\r\n            dispatch(checkAuthTime(3600))\r\n        })\r\n        .catch(err =>{\r\n            dispatch(authFail())\r\n            dispatch(errorMessage(err.response.data, err.response.status))\r\n        })\r\n    }\r\n}\r\n\r\nexport const authSignUpDoctor = (username, email, password1, password2, first_name, last_name) =>{\r\n    return dispatch => { \r\n        dispatch(authStart());\r\n        let data = JSON.stringify({\r\n            username:username,\r\n            email:email,\r\n            password:password1,\r\n            first_name  : first_name,\r\n            last_name: last_name\r\n\r\n        })\r\n        axios.post('http://localhost:8000/users/',data,{\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        })\r\n        .then(res=>{\r\n            console.log(res)\r\n            const token = res.data.token;\r\n            const expirationDate = new Date(new Date().getTime()+3600 * 1000)\r\n            localStorage.setItem('token',token)\r\n            localStorage.setItem('expirationDate',expirationDate)\r\n            localStorage.setItem('userName',res.data.username)\r\n            dispatch(authSuccess(token))\r\n            dispatch(checkAuthTime(3600))\r\n        })\r\n        .catch(err =>{\r\n            dispatch(authFail())\r\n            dispatch(errorMessage(err.response.data, err.response.status))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const authCheckState = ()=>{\r\n    return dispatch=>{      \r\n        const token = localStorage.getItem('token')\r\n        if (token === undefined){\r\n            dispatch(logout())\r\n        }\r\n        else{\r\n            const expirationDate = new Date(localStorage.getItem('expirationDate'))\r\n            if (expirationDate<=new Date()){\r\n                dispatch(logout())\r\n            }\r\n            else{\r\n                dispatch(authSuccess(token))\r\n                dispatch(checkAuthTime((expirationDate.getTime() - new Date().getTime()) /1000 ))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const errorMessage= (msg, status)=>{\r\n    return{\r\n        type:actionType.ERROR_LEAD,\r\n        payload: {msg,status}\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}